(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

/**
 * Config options:

   sel: '.my-class', // CSS target selector
   effect: 'move:fade-up', // Animation effect
   distance: 40, // How many pixels the element moves while animating in px
   duration: 1000, // Animation duration in ms
   delay: 0, // Adds a delay before the animation happens

   sequence: 'mySequence', // Group elements to animate in a sequence 
   sequenceDelay: 250 // Amount of increasing delay between sequence items (excludes first item, which uses delay instead)

 * Available effects (sass/iopmotion.scss):
   Fade: fade-up, fade-down, fade-left, fade-right
   Slide: slide-up, slide-down, slide-left, slide-right
 */
var moveTargets = [{
  sel: '.exampleSequence > div',
  sequence: 'exampleSequence',
  sequenceDelay: 500
}, {
  sel: '.header li',
  effect: 'slide-left',
  sequence: 'header-lists'
}, {
  sel: 'img',
  sequence: '1',
  delay: 250
}, {
  sequence: '2',
  sel: '.sequence p',
  effect: 'fade-up',
  delay: 100
}, {
  sequence: '2',
  sel: 'li',
  effect: 'fade-right',
  delay: 100
}, {
  sequence: '2',
  sel: '.nosequence p, .nosequence div',
  duration: 1000,
  distance: 20,
  effect: 'fade-down'
}];
module.exports = moveTargets;

},{}],2:[function(require,module,exports){
"use strict";

var config = require('./iopmotion_config.js');

var defaults = config.defaults;
var targets = config.targets;
/**
 * Set up Observers
 */
// Activate element animation

function animateElement(t, observer) {
  t.classList.add(defaults.effectPrefix + defaults.activeClass);
  observer.unobserve(t);
}

var observerCallback = function observerCallback(entries, observer) {
  // Resets each time a new group of sequenced entries enters the viewport
  var previousSequence = {};
  var previousDelay = 250;
  entries.forEach(function (entry) {
    var t = entry.target;
    var seqGroup = t.getAttribute('data-motion-seqgroup');
    var seqDelay = t.getAttribute('data-motion-seqdelay');

    if (entry.isIntersecting) {
      /**
       * Process sequencing
       * 
       * 1) A sequence only applies to visible elements, in batches, as they enter the viewport.
       * 2) Elements are grouped by individual sequence groups,
       * preventing multiple concurrent sequences from overlapping eachothers parameters
       */
      if (seqGroup) {
        var previousSequenceEntry = previousSequence[seqGroup]; // Increase the delay for the current item, based on last item's delay

        if (previousSequenceEntry) {
          previousDelay = getComputedStyle(previousSequenceEntry).getPropertyValue('--delay');
          t.style.setProperty('--delay', Number(previousDelay) + Number(seqDelay));
        }

        previousSequence[seqGroup] = t;
      }

      animateElement(t, observer);
    }
    /**
     * (!) Edge case
     * If a user entered the page already scrolled down (i.e. from an anchor link)
     * then cancel animations on all elements that are outside the viewport upwards.
     * We do this because animations just don't look great when scrolling up.
     * 
     * (+) Consider implementing reversed animations logic.
     */
    else if (entry.boundingClientRect.top < 0 && !entry.isIntersecting) {
      t.style.setProperty('--delay', 0);
      t.style.setProperty('--duration', 0);
      animateElement(t, observer);
    }
  });
};

var observer = new IntersectionObserver(observerCallback, {});
/**
 * Apply setting to all @targets
 * and send them to @observer
 */

var groupedSelectors = {};
targets.forEach(function (t) {
  var sel = t.sel;
  var els = document.querySelectorAll(sel);
  if (!els.length) return false;
  var tSequence = t.sequence;
  els.forEach(function (elm) {
    var effect = elm.getAttribute('data-motion-effect') || t.effect || defaults.effect;
    var distance = elm.getAttribute('data-motion-distance') || t.distance || defaults.distance;
    var duration = elm.getAttribute('data-motion-duration') || t.duration || defaults.duration;
    var delay = elm.getAttribute('data-motion-delay') || t.delay || defaults.delay;
    var seqDelay = elm.getAttribute('data-motion-seqdelay') || t.sequenceDelay || defaults.sequenceDelay;
    elm.style.setProperty('--distance', distance);
    elm.style.setProperty('--duration', duration);
    elm.style.setProperty('--delay', delay);

    if (tSequence) {
      elm.setAttribute('data-motion-seqgroup', tSequence);
      elm.setAttribute('data-motion-seqdelay', seqDelay);
    }

    ;
    elm.classList.add(defaults.effectPrefix + effect);
  });

  if (tSequence) {
    if (groupedSelectors[tSequence]) groupedSelectors[tSequence].push(sel);else groupedSelectors[tSequence] = [sel];
  } else {
    if (groupedSelectors['nosequence']) groupedSelectors['nosequence'].push(sel);else groupedSelectors['nosequence'] = [sel];
  }
});
/**
 * Loop through grouped targets belonging to the same sequence.
 * 
 * This enables multiple targets with independent configurations
 * to belong to the same main sequence.
 * (by applying the same sequence id in the target config)
 * 
 * E.g. sequence: 'footerAnimations'
 */

for (var i in groupedSelectors) {
  var selector = groupedSelectors[i].join(',');
  var els = document.querySelectorAll(selector);
  els.forEach(function (elm) {
    observer.observe(elm);
  });
}

},{"./iopmotion_config.js":3}],3:[function(require,module,exports){
"use strict";

var userTargets = require('../animations.js');
/**
 * Set Default Settings
 * 
 * Effects:
 * fade-up, fade-down, fade-left, fade-right
 * slide-up, slide-down, slide-left, slide-right
*/


var defaults = {
  effectPrefix: 'move:',
  activeClass: 'inview',
  effect: 'fade-up',
  distance: 40,
  // px
  duration: 1000,
  // ms
  delay: 0,
  // ms
  sequence: false,
  sequenceDelay: 250 // increasing delay between sequence items (excludes first item, which uses delay instead+)

};
/**
 * Set Default Selectors
 * 
 * Usage
 * <div data-motion-effect="${effect}" />
 * 
 * Effects:
 * fade-up, fade-down, fade-left, fade-right
 * slide-up, slide-down, slide-left, slide-right
*/

var builtInTargets = [{
  sel: '[data-motion]'
}];
module.exports = {
  defaults: defaults,
  targets: builtInTargets.concat(userTargets)
};

},{"../animations.js":1}],4:[function(require,module,exports){
"use strict";

/**
 * main.js - JS entry point
 * 
 * Ideally this file is used only for requiring 
 * the different modules that make up this application.
 * 
 * Compiles to bundle.js
 */
require('./lib/iopmotion.js');

},{"./lib/iopmotion.js":2}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
